Describe three collision resolution strategies not mentioned here.

1. Since Quadratic Probing & Double Hashing were only mentioned in the checkpoint I will address them here. Probing refers to how you will search for alternate locations in the array to find an open slot. Quadratic Probing & Double hashing are both probing methods used in an open addressing collision resolution methods.

As a point of reference, for Linear Probing, the interval between probes is constant, generally 1. This means you will search each slot, one-by-one until an open slot is found. In Quadratic Probing, the interval between probes increases linearly, meaning the indices increase in a quadratic fashion. For example, say  your first probe is spot two away from the collision, then the second probe is 4 away from the previous (i.e. 6 away from the collision), then the third probe would be 6 away from the previous (i.e. 12 away from the collision), the fourth probe would be 8 away from the previous (i.e. 20 away from the collision). In this example the probing interval is doubling (linear function with a m=2). While the indices are increasing quadratically (where f(x) = x^2 + x).

Double Hashing, like linear probing, uses a constant probing interval and steps forward through the array until an empty location is reached, or the entire table has been searched. However, in double hashing this interval is set using a second, independent hash function.

2. Hopscotch Hashing combines principles from cuckoo hashing and linear probing. Hopscotch hashing uses the concept of neighborhoods, where for each bucket, it's neighborhood is defined as a small collection of nearby consecutive buckets. In a collision an item will be placed in the neighborhood of it's hashed bucket. This is ultimately achieved by clearing slots (hopscotching items around) to open up space in this neighborhood. Finding open slots to move these items happens in a fashion similar to linear probing.

3. Coalesced hashing is a combination of separate chaining and open addressing. Instead of creating new nodes in a linked list (like in Separate Chaining), in Coalesced Hashing when a collision occurs the first empty bucket is found and the new item is stored there. Then link is made from the bucket where the collision occurred to the empty bucket where the new key/value pair was stored.

Create your own collision resolution strategy and describe how it works.

If a collision occurs, you could just increase the size of your internal array by one and store the new value there. This would be incredibly inefficient and probably a terrible collision resolution strategy. The internal array could get very large and would leave many the buckets unused. And as the size increases the search, insertion and deletion time complexity increases linearly.

Another option could be to follow the separate chaining method, but when a collision occurs instead of creating a linked list insert a subarray containing the key,value pair present and the new key,value pair. I would push the old item and the new item into a new array. If subsequent collisions occurred at this index that item could just be pushed into the array. There would probably need to be a limit to how many items could be added to the array. So like a separate chain you would probably want to have a max load factor accounting for all of the elements in the internal array and all it's sub arrays. If this max load factor is exceeded then the internal array would need to be resized. This is probably not as efficient as separate chaining, otherwise it would be utilized.
