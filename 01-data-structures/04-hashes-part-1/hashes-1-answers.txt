question: Explain why doubling the size of the underlying array of your HashClass may be a poor idea.

  1.  Doubling the size of an array causes it to take twice up twice as much memory.  Not only is the process of doubling the amount of memory in use slow but, for large array's it increases the odds that the computer will have to access data from ram multiple times while times while accessing the array.

  2.  Doubling the length of the array rather than doubling it and adding one or, as Ruby's class does, doubling it and using the next highest prime number for the new array's length, greatly increases the odds that it will need to double multiple times to add a single item to the array as it increases the likelihood that the remainder after division continues to be the same.  A simple example would be an array of length two that already contains a item with a key that calculates its hash code to be 8000 and attempting to add another item with a key that calculates its hash code to 1600; both reduce down to index 0 in an array of length two thus requiring a resize, the problem is that they both continue to reduce down to index 0 at array length of 4, and 8, and 16, etc.  In this example the array would have to double in size 8 times before it finally had unique indexes to place the two items at. 
