What is Spatial Locality and why does it benefit performance?

  Spacial locality refers to the close distance of items in memory, specifically when
  we are talking about computer science. In this context, we are talking about Arrays
  and it reminds us that when initializing arrays, a block of memory is then carved out
  and assigned to this variable. Yes, in smaller situations this is beneficial as it
  relates to performance. Why? Because when accessing an array, the memory manager will
  pull the value of the array you are needing to access, but it will also anticipate that
  you might want to access the others in close proximity. So, it caches a range of them
  for easy and quick access.

Compare the performance of an Array to a Linked List using the Benchmark module.
Compare the time it takes to create a 10,000 item Array to appending 10,000 items to a Linked List.
  result = Benchmark.measure {
    testArray = Array.new
    10000.times do |x|
      testArray[x] = x
    end
  }
  #<Benchmark::Tms:0x007fdc8a927ca0 @label="", @real=0.0007429998368024826, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>

  result1 = Benchmark.measure {
    llist = LinkedList.new
    10.times do |x|
      node = Node.new(x)
      llist.add_to_tail(node)
    end
  }
  #<Benchmark::Tms:0x007fa68692e7d8 @label="", @real=0.00516200065612793, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>

Compare the time it takes to access the 5000th element of the Array and the 5000th Node in the Linked List.
  result_find_array = Benchmark.measure {
    y = testArray[5000]
  }
  #<Benchmark::Tms:0x007fa6868c7510 @label="", @real=2.9997900128364563e-06, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>

  result_find_node = Benchmark.measure {
    node = @head
    5000.times do |x|
      node = node.next
    end
  }


Compare the time it takes to remove the 5000th element from the Array to removing the 5000th Node in the Linked List.
In the Array, the 5001st item becomes the 5000th, and so on.
